packages 
----------
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
%matplotlib inline
from warnings import filterwarnings
filterwarnings('ignore')


______________________
LINEAR REGRESSION
________________________

spliting dataset for - train and test .
---------------------------------------
X=df[[feature1]] ##independent feature( DataFrame . not array)
y=df[feature2] ## dependent feature array . 

## Train test split
from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=size_in_decimal,random_state=random_number)

standardize the data - for fast optimization . 
--------------------

## standardize the dataset Train independent data
from sklearn.preprocessing import StandardScaler

scaler=StandardScaler()

X_train=scaler.fit_transform(X_train)
X_test=scaler.transform(X_test) 


Creating the Model 
------------------

## Train the Linear Regression Model
from sklearn.linear_model import LinearRegression

regressor=LinearRegression()

regressor.fit(X_train,y_train) ## train the model


see the slope and intercept
----------------------------

print("The slope or coefficient of weight is ",regressor.coef_)
print("Intercept:",regressor.intercept_)


see the plot of best fit line
------------------------------
plt.scatter(X_train,y_train)
plt.plot(X_train,regressor.predict(X_train),'r')

prediction
-----------
y_pred_test=regressor.predict(X_test)


Performance Metrics
-------------------

MSE,MAE,RMSE
------------

from sklearn.metrics import mean_squared_error,mean_absolute_error

mse=mean_squared_error(y_test,y_pred_test)
mae=mean_absolute_error(y_test,y_pred_test)
rmse=np.sqrt(mse)
print(mse)
print(mae)
print(rmse)


R square
---------

from sklearn.metrics import r2_score
score=r2_score(y_test,y_pred_test) # gives the accuracy

Adjusted R Square
------------------
1 - (1-score)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)


___________
ASSUMPTION
------------

## Assumptions
## plot a scatter plot for the prediction
plt.scatter(y_test,y_pred_test) # predicted points vs actual points 

if this follows a linear pattern - a model is well trained .

## Residuals
residuals=y_test-y_pred_test

## plot this residuals
import seaborn as sns
sns.distplot(residuals,kde=True)

If you get a gaussian distribution the model is good .

## Scatter plot with respect to prediction and residuals
## uniform distribution
plt.scatter(y_pred_test,residuals)

If we get a unifromly scattered plot , the model is good . 
